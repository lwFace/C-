// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:291


#include "nslisterC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Null_RefCount_Policy.h"
#include "tao/TypeCode_Constants.h"
#include "tao/Alias_TypeCode_Static.h"
#include "tao/Objref_TypeCode_Static.h"
#include "tao/String_TypeCode_Static.h"
#include "tao/Any_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "ace/OS_NS_string.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "nslisterC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:70

// Arg traits specializations.
namespace TAO
{
}


// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for TaoTester::IExampleZero.

TaoTester::IExampleZero_ptr
TAO::Objref_Traits<TaoTester::IExampleZero>::duplicate (
    TaoTester::IExampleZero_ptr p
  )
{
  return TaoTester::IExampleZero::_duplicate (p);
}

void
TAO::Objref_Traits<TaoTester::IExampleZero>::release (
    TaoTester::IExampleZero_ptr p
  )
{
  CORBA::release (p);
}

TaoTester::IExampleZero_ptr
TAO::Objref_Traits<TaoTester::IExampleZero>::nil (void)
{
  return TaoTester::IExampleZero::_nil ();
}

CORBA::Boolean
TAO::Objref_Traits<TaoTester::IExampleZero>::marshal (
    TaoTester::IExampleZero_ptr p,
    TAO_OutputCDR & cdr
  )
{
  return CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*TaoTester__TAO_IExampleZero_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

void TaoTester::IExampleZero::SetString (
    const char * inString
    ACE_ENV_ARG_DECL
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  if (!this->is_evaluated ())
    {
      ACE_NESTED_CLASS (CORBA, Object)::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IExampleZero_Proxy_Broker_ == 0)
    {
      TaoTester_IExampleZero_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Char *>::in_arg_val _tao_inString (inString);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_inString
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "SetString",
      9,
      this->the_TAO_IExampleZero_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0 ACE_ENV_ARG_PARAMETER);
  ACE_CHECK;
}

TaoTester::IExampleZero::IExampleZero (void)
 : the_TAO_IExampleZero_Proxy_Broker_ (0)
{
  this->TaoTester_IExampleZero_setup_collocation ();
}

void
TaoTester::IExampleZero::TaoTester_IExampleZero_setup_collocation ()
{
  if (::TaoTester__TAO_IExampleZero_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IExampleZero_Proxy_Broker_ =
        ::TaoTester__TAO_IExampleZero_Proxy_Broker_Factory_function_pointer (this);
    }
}

TaoTester::IExampleZero::~IExampleZero (void)
{}

void 
TaoTester::IExampleZero::_tao_any_destructor (void *_tao_void_pointer)
{
  IExampleZero *_tao_tmp_pointer =
    static_cast<IExampleZero *> (_tao_void_pointer);
  CORBA::release (_tao_tmp_pointer);
}

TaoTester::IExampleZero_ptr
TaoTester::IExampleZero::_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<IExampleZero>::narrow (
        _tao_objref,
        "IDL:sanas/TaoTester/IExampleZero:1.0",
        TaoTester__TAO_IExampleZero_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

TaoTester::IExampleZero_ptr
TaoTester::IExampleZero::_unchecked_narrow (
    CORBA::Object_ptr _tao_objref
    ACE_ENV_ARG_DECL
  )
{
  return
    TAO::Narrow_Utils<IExampleZero>::unchecked_narrow (
        _tao_objref,
        "IDL:sanas/TaoTester/IExampleZero:1.0",
        TaoTester__TAO_IExampleZero_Proxy_Broker_Factory_function_pointer
        ACE_ENV_ARG_PARAMETER
      );
}

TaoTester::IExampleZero_ptr
TaoTester::IExampleZero::_duplicate (IExampleZero_ptr obj)
{
  if (! CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
TaoTester::IExampleZero::_tao_release (IExampleZero_ptr obj)
{
  CORBA::release (obj);
}

CORBA::Boolean
TaoTester::IExampleZero::_is_a (
    const char *value
    ACE_ENV_ARG_DECL
  )
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:sanas/TaoTester/IExampleZero:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->ACE_NESTED_CLASS (CORBA, Object)::_is_a (
          value
          ACE_ENV_ARG_PARAMETER
        );
    }
}

const char* TaoTester::IExampleZero::_interface_repository_id (void) const
{
  return "IDL:sanas/TaoTester/IExampleZero:1.0";
}

CORBA::Boolean
TaoTester::IExampleZero::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TaoTester_IExampleZero (
    CORBA::tk_objref,
    "IDL:sanas/TaoTester/IExampleZero:1.0",
    "IExampleZero");
  
namespace TaoTester
{
  ::CORBA::TypeCode_ptr const _tc_IExampleZero =
    &_tao_tc_TaoTester_IExampleZero;
}



// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:50

namespace TAO
{
  template<>
  CORBA::Boolean
  Any_Impl_T<TaoTester::IExampleZero>::to_object (
      CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TaoTester
{
  
  
  // Copying insertion.
  void
  operator<<= (
      CORBA::Any &_tao_any,
      IExampleZero_ptr _tao_elem
    )
  {
    IExampleZero_ptr _tao_objptr =
      IExampleZero::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  // Non-copying insertion.
  void
  operator<<= (
      CORBA::Any &_tao_any,
      IExampleZero_ptr *_tao_elem
    )
  {
    TAO::Any_Impl_T<IExampleZero>::insert (
        _tao_any,
        IExampleZero::_tao_any_destructor,
        _tc_IExampleZero,
        *_tao_elem
      );
  }
  
  CORBA::Boolean
  operator>>= (
      const CORBA::Any &_tao_any,
      IExampleZero_ptr &_tao_elem
    )
  {
    return
      TAO::Any_Impl_T<IExampleZero>::extract (
          _tao_any,
          IExampleZero::_tao_any_destructor,
          _tc_IExampleZero,
          _tao_elem
        );
  }
}

#else


// Copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    TaoTester::IExampleZero_ptr _tao_elem
  )
{
  TaoTester::IExampleZero_ptr _tao_objptr =
    TaoTester::IExampleZero::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

// Non-copying insertion.
void
operator<<= (
    CORBA::Any &_tao_any,
    TaoTester::IExampleZero_ptr *_tao_elem
  )
{
  TAO::Any_Impl_T<TaoTester::IExampleZero>::insert (
      _tao_any,
      TaoTester::IExampleZero::_tao_any_destructor,
      TaoTester::_tc_IExampleZero,
      *_tao_elem
    );
}

CORBA::Boolean
operator>>= (
    const CORBA::Any &_tao_any,
    TaoTester::IExampleZero_ptr &_tao_elem
  )
{
  return
    TAO::Any_Impl_T<TaoTester::IExampleZero>::extract (
        _tao_any,
        TaoTester::IExampleZero::_tao_any_destructor,
        TaoTester::_tc_IExampleZero,
        _tao_elem
      );
}

#endif

// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TaoTester::IExampleZero_ptr _tao_objref
  )
{
  CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TaoTester::IExampleZero_ptr &_tao_objref
  )
{
  CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::TaoTester::IExampleZero RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        TaoTester__TAO_IExampleZero_Proxy_Broker_Factory_function_pointer
      );
    
  return 1;
}
