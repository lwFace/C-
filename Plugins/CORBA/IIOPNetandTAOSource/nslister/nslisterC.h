// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:153

#ifndef _TAO_IDL_NSLISTERC_H_
#define _TAO_IDL_NSLISTERC_H_

#include /**/ "ace\pre.h"


#include "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Environment.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

#if defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

// TAO_IDL - Generated from 
// c:\local\ace\tao\tao_idl\be\be_visitor_root/root_ch.cpp:62

namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}

// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_module/module_ch.cpp:48

namespace TaoTester
{
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:598

#if !defined (_TAOTESTER_IEXAMPLEZERO__VAR_OUT_CH_)
#define _TAOTESTER_IEXAMPLEZERO__VAR_OUT_CH_
  
  class IExampleZero;
  typedef IExampleZero *IExampleZero_ptr;
  
  typedef
    TAO_Objref_Var_T<
        IExampleZero
      >
    IExampleZero_var;
  
  typedef
    TAO_Objref_Out_T<
        IExampleZero
      >
    IExampleZero_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // c:\local\ace\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:54

#if !defined (_TAOTESTER_IEXAMPLEZERO_CH_)
#define _TAOTESTER_IEXAMPLEZERO_CH_
  
  class  IExampleZero
    : public virtual CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<IExampleZero>;
    typedef IExampleZero_ptr _ptr_type;
    typedef IExampleZero_var _var_type;
    
    // The static operations.
    static IExampleZero_ptr _duplicate (IExampleZero_ptr obj);
    
    static void _tao_release (IExampleZero_ptr obj);
    
    static IExampleZero_ptr _narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static IExampleZero_ptr _unchecked_narrow (
        CORBA::Object_ptr obj
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    static IExampleZero_ptr _nil (void)
    {
      return static_cast<IExampleZero_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // c:\local\ace\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
    
    virtual void SetString (
        const char * inString
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      )
      ACE_THROW_SPEC ((
        CORBA::SystemException
      ));
    
    // TAO_IDL - Generated from
    // c:\local\ace\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:210
    
    virtual CORBA::Boolean _is_a (
        const char *type_id
        ACE_ENV_ARG_DECL_WITH_DEFAULTS
      );
    
    virtual const char* _interface_repository_id (void) const;
    virtual CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_IExampleZero_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    IExampleZero (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void TaoTester_IExampleZero_setup_collocation (void);
    
    // Concrete non-local interface only.
    IExampleZero (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0
      );
    
    // Non-local interface only.
    IExampleZero (
        TAO_Stub *objref,
        CORBA::Boolean _tao_collocated = 0,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0
      );
    
    virtual ~IExampleZero (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    IExampleZero (const IExampleZero &);
    
    void operator= (const IExampleZero &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // c:\local\ace\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44
  
  extern  ::CORBA::TypeCode_ptr const _tc_IExampleZero;

// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_module/module_ch.cpp:66

} // module TaoTester

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_root/root.cpp:139

extern 
TAO::Collocation_Proxy_Broker *
(*TaoTester__TAO_IExampleZero_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// .\be\be_visitor_traits.cpp:61

// Traits specializations.
namespace TAO
{

#if !defined (_TAOTESTER_IEXAMPLEZERO__TRAITS_)
#define _TAOTESTER_IEXAMPLEZERO__TRAITS_
  
  template<>
  struct  Objref_Traits< ::TaoTester::IExampleZero>
  {
    static ::TaoTester::IExampleZero_ptr duplicate (
        ::TaoTester::IExampleZero_ptr
      );
    static void release (
        ::TaoTester::IExampleZero_ptr
      );
    static ::TaoTester::IExampleZero_ptr nil (void);
    static CORBA::Boolean marshal (
        ::TaoTester::IExampleZero_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}

// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:52



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TaoTester
{
   void operator<<= (CORBA::Any &, IExampleZero_ptr); // copying
   void operator<<= (CORBA::Any &, IExampleZero_ptr *); // non-copying
   CORBA::Boolean operator>>= (const CORBA::Any &, IExampleZero_ptr &);
}

#else

 void operator<<= (CORBA::Any &, TaoTester::IExampleZero_ptr); // copying
 void operator<<= (CORBA::Any &, TaoTester::IExampleZero_ptr *); // non-copying
 CORBA::Boolean operator>>= (const CORBA::Any &, TaoTester::IExampleZero_ptr &);

#endif

// TAO_IDL - Generated from
// c:\local\ace\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55

 CORBA::Boolean operator<< (TAO_OutputCDR &, const TaoTester::IExampleZero_ptr );
 CORBA::Boolean operator>> (TAO_InputCDR &, TaoTester::IExampleZero_ptr &);

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:955

#if defined (__ACE_INLINE__)
#include "nslisterC.inl"
#endif /* defined INLINE */

#if defined(_MSC_VER)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#include /**/ "ace\post.h"

#endif /* ifndef */


